#!/bin/bash
set -eu

# shellcheck disable=SC2064

numeric_trap() {
    num="$1"
    name="$(kill -l "$num")"
    msg="Caught signal $num (SIG$name)"
    if [ -n "$loop" ]; then
        trap "echo '$msg'" $num
    else
        trap "echo '$msg'; echo 'Exiting $num'; exit $num" $num
    fi
}

usage() {
    basename="$(basename "$0")"
    cat >&2 <<EOM
usage: $basename [--loop] [SIGNAL...]

Print a message to stdout when receiving any signals.

Print the PID to stderr at startup. You can kill $basename by PID or with
something like \`killall -9 $basename'.

If no SIGNAL is given, handle ALL signals. If --loop is specified, don't exit
when receiving signals, which will mean the user must send a fatal signal
like kill -9.
EOM
}

loop=

while [ $# -gt 0 ] && [[ $1 == -* ]]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -l|--loop)
            loop=1
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

echo >&2 "pid $$"

NSIG=64

if [ $# -eq 0 ]; then
    echo >&2 "Setting up traps on all signals"
    for i in $(seq 1 $NSIG); do
        numeric_trap "$i"
    done
else
    echo >&2 "Setting up traps on specified signals"
    for sig in "$@"; do
        if [ "$sig" -ge 0 ] 2>/dev/null; then
            numeric_trap "$sig"
        else
            num="$(kill -l "$sig")"
            numeric_trap "$num"
        fi
    done
fi


while true; do
    # put sleep in background so it doesn't get signalled
    sleep 1 &
    wait || true
done
