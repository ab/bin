#!/usr/bin/env python3

import os
import sys


NULL_CHAR = '_'
FILL_CHAR = 'X'


def sizeof_fmt(num, suffix='B'):
    if num == 0:
        return "0B"
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)


def main(filenames, options=None):
    if not filenames:
        sys.stderr.write('usage: {} FILE...\n'.format(
            os.path.basename(sys.argv[0])))
        sys.exit(1)

    for filename in filenames:
        filename, count, total, size = count_filled(filename, print_dots=False)
        # technically / 0 is NaN, but 0% makes intuitive sense
        frac = count / total if total > 0 else 0
        print(f"{filename!r}: {frac:.0%} full of {sizeof_fmt(size)}")


def count_filled(filename, blocksize=None, print_dots=False):
    count = 0
    total = 0

    file_size = os.stat(filename).st_size

    if print_dots:
        sys.stdout.write('{!r}: '.format(filename))

    if blocksize is None:
        if print_dots:
            blocksize = file_size // 1660
        else:
            blocksize = 4096

    null_block = b'\0' * blocksize

    with open(filename, 'rb') as fh:
        while True:
            block = fh.read(blocksize)
            if not block:
                break

            total += 1

            if (
                block == null_block
                if len(block) == blocksize
                else block.count(b"\0") == len(block)
            ):
                if print_dots:
                    sys.stdout.write(NULL_CHAR)
                    sys.stdout.flush()
            else:
                count += 1
                if print_dots:
                    sys.stdout.write(FILL_CHAR)
                    sys.stdout.flush()

    if print_dots:
        sys.stdout.write('\n')
        sys.stdout.flush()

    return (filename, count, total, file_size)


if __name__ == '__main__':
    main(sys.argv[1:])
