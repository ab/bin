#!/usr/bin/env python

import os
import sys
import re

not_null_re = re.compile('[^\0]')

NULL_CHAR = '_'
FILL_CHAR = 'X'

def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)

def main(filenames, options=None):
    if not filenames:
        sys.stderr.write('usage: {} FILE...\n'.format(
            os.path.basename(sys.argv[0])))
        sys.exit(1)

    for filename in filenames:
        filename, count, total, size = count_filled(filename, print_dots=True)
        print('{!r}: {}% of {}'.format(filename, 100.0 * count / total,
                                       sizeof_fmt(size)))


def count_filled(filename, blocksize=None, print_dots=False):
    count = 0
    total = 0

    file_size = os.stat(filename).st_size

    if print_dots:
        sys.stdout.write('{!r}: '.format(filename))

    if blocksize is None:
        if print_dots:
            blocksize = file_size / 1660
        else:
            blocksize = 4096

    null_block = '\0' * blocksize

    with open(filename, 'r') as fh:
        while True:
            block = fh.read(blocksize)
            if not block:
                break

            total += 1

            # if not_null_re.search(block):
            if ((len(block) == len(null_block) and block != null_block) or
                (len(block) != len(null_block)
                    and block.count('\0') == len(block))):
                count += 1
                if print_dots:
                    sys.stdout.write(FILL_CHAR)
                    sys.stdout.flush()
            else:
                if print_dots:
                    sys.stdout.write(NULL_CHAR)
                    sys.stdout.flush()

    if print_dots:
        sys.stdout.write('\n')
        sys.stdout.flush()

    return (filename, count, total, file_size)

if __name__ == '__main__':
    main(sys.argv[1:])
