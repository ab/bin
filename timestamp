#!/usr/bin/env python

import optparse
import sys
import time
from datetime import datetime

VERSION = '1.2'

def main():
    usage = '''%prog [options] UNIX_STAMP...

Convert each UNIX_STAMP into a date string according to strftime FMT.
'''.rstrip()
    p = optparse.OptionParser(usage=usage, version = '%prog ' + VERSION)
    p.add_option('-u', '--utc', dest='local', action='store_false',
                 help='print time in UTC', default=True)

    p.add_option('-f', '--format', help='strftime format', dest='tformat',
                 metavar='FMT')
    p.add_option('-s', '--stamp', help='print current timestamp', dest='stamp',
                 action='store_true')
    p.add_option('-i', '--integer', help='print integer times',
                 dest='integer', action='store_true')
    p.add_option('-l', '--ldap', help='treat stamp as LDAP/AD timestamp',
                 dest='ldap_stamp', action='store_true')

    opts, args = p.parse_args()

    if opts.stamp:
        print_current_timestamp(integer=opts.integer)
        return 0

    if not args:
        p.print_help()
        return 1

    for stamp in args:
        print_stamp_as_string(stamp, opts)

    return 0

def ldap_timestamp_to_unix_timestamp(stamp):
    """
    Convert LDAP / Active Directory timestamp to UNIX timestamp.

    LDAP stores times as integer 100-nanosecond intervals since Jan 1, 1601.
    UNIX timestamps are stored as seconds since Jan 1, 1970.
    """
    unix_epoch_since_1601 = 11644473600
    return stamp/10000000.0 - unix_epoch_since_1601

def print_stamp_as_string(stamp_str, opts):
    if opts.ldap_stamp:
        stamp = ldap_timestamp_to_unix_timestamp(int(stamp_str))
    else:
        if '.' in stamp_str:
            stamp = float(stamp_str)
        else:
            stamp = int(stamp_str)

    tformat = '%F %R:%S'
    if isinstance(stamp, float):
        if opts.integer:
            stamp = int(round(stamp))
        else:
            tformat = '%F %R:%S.%f'

    if opts.tformat:
        default_format = False
        tformat = opts.tformat
    else:
        default_format = True

    if opts.local:
        t = datetime.fromtimestamp(stamp)
        tzname = time.strftime('%Z')
    else:
        t = datetime.utcfromtimestamp(stamp)
        tzname = 'UTC'

    sys.stdout.write(t.strftime(tformat))
    if default_format:
        sys.stdout.write(' ' + tzname)
    sys.stdout.write('\n')

def print_current_timestamp(integer=False):
    if integer:
        fmt = '%s'
    else:
        fmt = '%s.%f'
    sys.stdout.write(datetime.now().strftime(fmt) + '\n')

if __name__ == '__main__':
    sys.exit(main())
