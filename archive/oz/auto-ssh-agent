#!/bin/bash
# VERSION 1.4

# abort if stdin is not a terminal (e.g. for sftp)
if [ ! -t 0 ]; then
	return 2>/dev/null
	exit
fi

AGENTRC="$HOME/.ssh/agentrc"

debug() {
	echo "$*" >&2
}

agent_running() {
	[ -n "$1" ] || return 3
	cmd="$(ps -p "$1" -o comm=)"
	if [ "$cmd" = "ssh-agent" -o "$cmd" = "gnome-keyring-d" ]; then
		return 0
	else
		return 2
	fi
}

find_agent() {
	# find the newest process running as our user named exactly "ssh-agent"
	#pid=$(pgrep -o -x -u $UID ssh-agent) || pid=$(pgrep -o -x -u $UID ssh-agent) || return 1
	pid=$(pgrep -o -x -u $UID ssh-agent)

	# if none, look for a running gnome-keyring-daemon
	if [ -z "$pid" ]; then
		pid=$(pgrep -o -f -u $UID '^/usr/bin/gnome-keyring-daemon') || return 1
	fi

	cmdline="/proc/$pid/cmdline"
	if grep -E '(gnome-keyring-daemon|dbus-launch)' $cmdline > /dev/null; then
		# ssh-agent was probably started by gnome
		# find gnome-keyring's sockets
		listing="$(ls -d /tmp/keyring-*)"
		if [ "$(echo $listing | wc -w)" != "1" ]; then
			# there's more than one candidate directory; give up
			return 3
		fi
		socket="$listing/ssh"
		debug "found gnome-keyring-daemon socket"
	else
		# ssh-agent probably not started by gnome
		listing="$(ls -d /tmp/ssh-*)"
		if [ "$(echo $listing | wc -w)" = "1" ]; then
			socket="$(ls "$listing"/agent.*)"
		else
			# there's more than one candidate directory; find one close to pid
			socket=
			for dir in $listing; do
				sock="agent.$(expr $pid - 1)"
				if [ -S "$dir/$sock" ]; then
					socket="$dir/$sock"
					break
				fi
			done
			if [ -z $socket ]; then
				# no socket found
				return 5
			fi
		fi
	fi

	# ensure the socket exists
	if [ ! -S "$socket" ]; then
		return 7
	fi

	# echo discovered settings
	echo "SSH_AUTH_SOCK=$socket; export SSH_AUTH_SOCK;"
	echo "SSH_AGENT_PID=$pid; export SSH_AGENT_PID;"
	echo "echo Agent pid $pid;"
}

# load variables from $AGENTRC if it exists and contains valid data
load_agentrc() {
	[ -f "$AGENTRC" ] || return 1

	orig_SSH_AGENT_PID="$SSH_AGENT_PID"
	orig_SSH_AUTH_SOCK="$SSH_AUTH_SOCK"
	unset SSH_AGENT_PID SSH_AUTH_SOCK

	. "$AGENTRC"

	# check that PID is valid and AUTH_SOCK exists
	if ssh_vars_valid; then
		return 0
	else
		echo "data in agentrc is stale" # DEBUG
		rm "$AGENTRC"
		SSH_AGENT_PID="$orig_SSH_AGENT_PID"
		SSH_AUTH_SOCK="$orig_SSH_AUTH_SOCK"
		return 2
	fi
}

# check that PID is valid and AUTH_SOCK exists
ssh_vars_valid() {
	agent_running $SSH_AGENT_PID || return 1

	[ -S "$SSH_AUTH_SOCK" ] || return 2

	return 0
}


find_or_start_agent() {
	# check existing agentrc
	if load_agentrc; then
		return 0
	fi

	# see if we already have a valid environment
	if ssh_vars_valid; then
		# agent is alive! write out new agentrc
		cat > "$AGENTRC" <<EOM
SSH_AUTH_SOCK=$SSH_AUTH_SOCK; export SSH_AUTH_SOCK;
SSH_AGENT_PID=$SSH_AGENT_PID; export SSH_AGENT_PID;
echo Agent pid $SSH_AGENT_PID;
EOM
		echo Agent pid $SSH_AGENT_PID;
		return 0
	fi
	
	# we haven't found an ssh-agent yet; search for a running one
	tmpf="$(mktemp)" || return 13
	if find_agent > "$tmpf"; then
		# we found an agent, replace the agentrc!
		mv -f $tmpf "$AGENTRC"
		echo "find_agent found an ssh-agent"
		. "$AGENTRC"
		return 0
	else
		rm -f $tmpf
	fi

	# none found: start a new ssh-agent
	ssh-agent > "$AGENTRC"
	. "$AGENTRC"

	# add keys
	if [ -z "$KEY_TIMEOUT" ]; then
		ssh-add
	else
		ssh-add -t "$KEY_TIMEOUT"
	fi

	return 0
}


# ==== begin main =====

if [ -n "$1" ]; then
	KEY_TIMEOUT="$1"
fi

# debug
if [ "$1" = "-f" ]; then
	find_agent
	r=$?
	return $r > /dev/null
	exit $r
fi

find_or_start_agent || echo 'error!'
