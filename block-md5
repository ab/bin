#!/usr/bin/python
import hashlib
import sys

# Testing suggests that 32K causes us to be CPU bound. With faster disks, it
# may be desirable to increase this higher.
BLOCK_SIZE = 32 * 1024
#BLOCK_SIZE = 4 * 1024 # TODO DEBUG

def block_sums(stream, block_size=BLOCK_SIZE):
    while True:
        current_pos = stream.tell()
        block = stream.read(block_size)
        if not block:
            break
        md5 = hashlib.md5()
        md5.update(block)
        yield (current_pos, block_size, md5.hexdigest())

def do_file(filename):
    fh = open(filename, 'r')
    for offset, size, checksum in block_sums(fh):
        print offset, size, checksum

def do_files(filenames):
    for filename in filenames:
        do_file(filename)

if __name__ == '__main__':
    filenames = sys.argv[1:]
    if not filenames:
        print 'TODO: USAGE' # TODO
        sys.exit(1)
    do_files(filenames)
